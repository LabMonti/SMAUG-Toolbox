function sequenceIDs = step_SingleShift(sequenceIDs,GCO)
    %Copyright 2021 LabMonti.  Written by Nathan Bamberger.  This work is 
    %licensed under the Creative Commons Attribution-NonCommercial 4.0 
    %International License. To view a copy of this license, visit 
    %http://creativecommons.org/licenses/by-nc/4.0/.  
    %
    %Function Description: Generate a trial MCMC step by picking one node
    %at random from the sequence and trying to move it up or down by one
    %node
    %
    %~~~INPUTS~~~:
    %
    %sequenceIDs: vector listing the node ID# for each node in the
    %   node-sequence
    %
    %GCO: GridCorrelationObject containing all the node information for the
    %   dataset that the MCMC is being run on 
    %
    %######################################################################
    %
    %~~~OUTPUTS~~~:
    %  
    %sequenceIDs: vector listing the node ID#s for the new sequence
    %   generated by the trial step; will be NaN if the trial step was
    %   automatically rejected because it would have fallen off the
    %   existing nodes
    
    
    %Randomly pick one of the nodes to try moving
    n = length(sequenceIDs);
    nodeID = randperm(n,1);

    %With 50% probability, try moving up
    if rand() > 0.5
        
        %If the node cannot be moved up, return NaN (will be
        %interpreted as an instant reject) (column 2 for checking northern
        %neighbor)
        if GCO.MissingNeighbors(sequenceIDs(nodeID),2)
            sequenceIDs = NaN;
        else
            sequenceIDs(nodeID) = GCO.VerticalNeighbors(...
                sequenceIDs(nodeID),2);
        end
        
    %With 50% probability, try moving down
    else
        
        %If the node cannot be moved down, return NaN (will be
        %interpreted as an instant reject) (column 1 for checking southern
        %neighbor)
        if GCO.MissingNeighbors(sequenceIDs(nodeID,1))
            sequenceIDs = NaN;
        else
            sequenceIDs(nodeID) = GCO.VerticalNeighbors(...
                sequenceIDs(nodeID),1);
        end      
    end

end