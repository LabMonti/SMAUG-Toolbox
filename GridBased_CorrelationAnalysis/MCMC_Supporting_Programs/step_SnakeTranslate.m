function sequenceIDs = step_SnakeTranslate(sequenceIDs, GCO)
    %Copyright 2021 LabMonti.  Written by Nathan Bamberger.  This work is 
    %licensed under the Creative Commons Attribution-NonCommercial 4.0 
    %International License. To view a copy of this license, visit 
    %http://creativecommons.org/licenses/by-nc/4.0/.  
    %
    %Function Description: Generate a trial MCMC step by trying "snake" the
    %entire sequence left or right by moving the left-most node to the right
    %end or vice versa (staying in the same row). 
    %
    %~~~INPUTS~~~:
    %
    %sequenceIDs: vector listing the node ID# for each node in the
    %   node-sequence
    %
    %GCO: GridCorrelationObject containing all the node information for the
    %   dataset that the MCMC is being run on 
    %
    %######################################################################
    %
    %~~~OUTPUTS~~~:
    %  
    %sequenceIDs: vector listing the node ID#s for the new sequence
    %   generated by the trial step; will be NaN if the trial step was
    %   automatically rejected because it would have fallen off the
    %   existing nodes
    
    
    %Get maximum x-value of node IDs
    XL = size(GCO.AllNodeIDs,1);
    
    n = length(sequenceIDs);
  
    %With 50% probability, try snaking right
    if rand() > 0.5
        
        %Find the y-value for the node on the left
        y = GCO.UniqueNodes(sequenceIDs(1),2);

        %Find the x-value for where the node would move to--just to the
        %right of the right-most node
        x = GCO.UniqueNodes(sequenceIDs(n),1)+1;
        
        %If the place we are going to move the left-most node to doesn't
        %exist, return NaN (will be interpreted as an instant reject)
        if x > XL || GCO.AllNodeIDs(x,y) == 0
            sequenceIDs = NaN;
        else
        %Otherwise, we need to shift the left-most node to the right
        
            %Keep all nodes except left-most, just free up a space for a
            %new ID
            sequenceIDs(1:n-1) = sequenceIDs(2:n);
            
            %Add the new ID
            sequenceIDs(n) = GCO.AllNodeIDs(x,y);
        end
        
    %With 50% probability, try snaking left
    else
        
        %Find the y-value for the node on the right
        y = GCO.UniqueNodes(sequenceIDs(n),2);
        
        %Find the x-value for where the right-most node would move
        %to--i.e., just to the left of the current left-most node
        x = GCO.UniqueNodes(sequenceIDs(1),1)-1;
        
        %If the place we are going to move the right-most node to doesn't
        %exist, return NaN (will be interpreted as an instant reject)
        if x < 1 || GCO.AllNodeIDs(x,y) == 0
            sequenceIDs = NaN;
        else
        %Otherwise, we need to snake the sequence to the left, and so add
        %the right-most node to the left end
        
            %Keep all nodes except right-most, but snake them out of the
            %way to free up a space for a new ID
            sequenceIDs(2:n) = sequenceIDs(1:n-1);
            
            %Add the new ID
            sequenceIDs(1) = GCO.AllNodeIDs(x,y);
        end
            
    end

end